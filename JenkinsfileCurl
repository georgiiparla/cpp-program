pipeline {
    agent any

    environment {
        // Build Configuration
        COMPILED_FILE_NAME   = 'program-foo-bar'
        ZIP_NAME             = 'core_ws.zip'

        // Nexus Base Configuration
        NEXUS_URL            = '172.20.10.25:8081'
        NEXUS_CREDENTIALS_ID = '7d196d2f-f3c1-4803-bde9-2d17d18776b3'
        NEXUS_REPO           = 'cpp-releases'

        // Centralized Configuration
        NEXUS_REPO_URL       = "${NEXUS_URL}/repository/${NEXUS_REPO}"
        NEXUS_PATH_STRUCTURE = 'folder1/foo/bar/product'
        
        // Central place to define your versioning rule
        VERSION_STRATEGY     = "${BUILD_NUMBER}"
    }

    stages {
        // Build stages (Checkout, Compile, Package, etc.)
        stage('Build & Package') {
            steps {
                cleanWs()
                checkout scm
                echo "Compiling..."
                sh "g++ -I main/ main/*.cpp -o ${COMPILED_FILE_NAME}"
                echo "Packaging..."
                sh "zip ${ZIP_NAME} ${COMPILED_FILE_NAME}"
            }
        }

        // Check first outcomes
        stage("Inspect Workspace before publishing to Nexus") {
            steps {
                echo "Listing all files in the workspace..."
                sh 'ls -la'
            }
        }

        // Nexus part
        stage('Publish to Nexus') {
            steps {
                script {
                    def fullArtifactUrl = "${NEXUS_REPO_URL}/${NEXUS_PATH_STRUCTURE}/${VERSION_STRATEGY}/${ZIP_NAME}"
                    echo "Uploading artifact as: ${fullArtifactUrl}"

                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS_ID}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                            # Using escaped variables for security
                            curl -v -f -u "\$NEXUS_USER:\$NEXUS_PASS" \\
                                 --upload-file ${ZIP_NAME} \\
                                 "${fullArtifactUrl}"
                        """
                    }
                }
            }
        }

        stage ('Retrieve and Verify Artifact') {
            steps {
                script {
                    def saveAsRetrievedBuild = "my-retrieved-build.zip"
                    def fullArtifactUrl = "${NEXUS_REPO_URL}/${NEXUS_PATH_STRUCTURE}/${VERSION_STRATEGY}/${ZIP_NAME}"
                    echo "Downloading artifact from: ${fullArtifactUrl}"

                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS_ID}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh """
                            # Using escaped variables for security
                            curl -v -f -u "\$NEXUS_USER:\$NEXUS_PASS" -o ${saveAsRetrievedBuild} \\
                                 "${fullArtifactUrl}"
                        """
                    }
                    sh "test -f ${saveAsRetrievedBuild}"
                    echo "Verification successful. File '${saveAsRetrievedBuild}' exists."
                }
            }
        }

        stage("Inspect Workspace after downloading from Nexus") {
            steps {
                echo "Listing all files in the workspace..."
                sh 'ls -la'
            }
        }

        stage ("Deploy") {
            steps {
                echo 'Deploying...'
            }
        }
    }
}
