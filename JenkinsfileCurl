pipeline {
    agent any

    environment {
        FILE_NAME = 'program-foo-bar'

        ARTIFACT_ID = 'core'
        ZIP_NAME = 'core_ws.zip'
        BASE_VERSION = '1.0'

        NEXUS_URL = '172.20.10.25:8081'
        NEXUS_CREDENTIALS_ID = '7d196d2f-f3c1-4803-bde9-2d17d18776b3'
        NEXUS_GROUP_ID = 'CS-Katana-lin/main'
        NEXUS_REPO = 'cpp-releases'
    }

    stages {
        
        stage ('Build Executable') {
            steps {
                echo "Compiling C++ source files..."
                sh "g++ -I main/ main/*.cpp -o ${FILE_NAME}"
            }
        }

        stage ('Test'){
            steps {
                echo 'Testing...'
            }
        }

        stage('Package Artifact') {
            steps {
                echo "Packaging the executable into a ZIP archive..."
                sh "zip ${ZIP_NAME} ${FILE_NAME}"
            }
        }

        stage('Publish to Nexus') {
            steps {
                script {
                    def snapshotVersion = "${BASE_VERSION}.${BUILD_NUMBER}"
                    echo "Uploading artifact version ${snapshotVersion} to ${NEXUS_REPO}..."

                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS_ID}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        
                        sh """
                            curl -v -u "${NEXUS_USER}:${NEXUS_PASS}" \\
                                --upload-file ${ZIP_NAME} \\
                                ${NEXUS_URL}/repository/${NEXUS_REPO}/${NEXUS_GROUP_ID}/${ARTIFACT_ID}/${snapshotVersion}/${ZIP_NAME}
                        """
                    }
                }
            }
        }

        stage ('Retrieve and Verify Artifact') {
            steps {
                script {
                    // Define the version and filename of the artifact we want to pull
                    def targetVersion = "${BASE_VERSION}.${BUILD_NUMBER}"
                    def targetZipName = "${ZIP_NAME}" // Using the same ZIP_NAME from your environment

                    echo "Attempting to download ${targetZipName} version ${targetVersion} from Nexus..."

                    def localFileName = "my-retrieved-build.zip"

                    withCredentials([usernamePassword(credentialsId: "${NEXUS_CREDENTIALS_ID}", usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        
                        // Use curl to download the file. The '-o' flag specifies the output filename.
                        sh """
                            curl -v -u "${NEXUS_USER}:${NEXUS_PASS}" -o ${localFileName} \\
                                ${NEXUS_URL}/repository/${NEXUS_REPO}/${NEXUS_GROUP_ID}/${ARTIFACT_ID}/${targetVersion}/${targetZipName}
                        """
                    }

                    // --- Verification Step ---
                    // This command checks if the file exists in the current workspace.
                    // The 'sh' step will automatically fail the build if the command inside returns a non-zero exit code.
                    echo "Verifying that the artifact was downloaded successfully..."
                    sh "test -f ${localFileName}"
                    
                    echo "Verification successful. File '${targetZipName}' exists in the workspace."
                }
            }
        }

        stage ('Deploy'){
            steps {
                echo 'Deploying...'
            }
        }
    }
}
